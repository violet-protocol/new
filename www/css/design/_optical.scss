@use "../base/index" as *;
@use "constant" as *;
@use "font" as *;

$logo-weight: 600;
@keyframes breatheweight {
	40% {
		font-variation-settings: "wght" #{$logo-weight};
	}
	50% {
		font-variation-settings: "wght" #{$min-weight};
	}

	60% {
		font-variation-settings: "wght" #{$logo-weight};
	}
}

@keyframes breathebackground {
	0% {
		background-color: fade-out($white, 0.5);
	}
	25% {
		background-color: fade-out($accent--color, 0.2);
	}
	50% {
		background-color: fade-out($accent--color, 0.8);
	}
	75% {
		background-color: fade-out($accent--color, 0.2);
	}
	80% {
		background-color: fade-out($white, 0.5);
	}
}

body {
	cursor: crosshair;
}
[data-splitting] {
	.char {
		$countchar: 6;
		$duration: 6000ms;
		--delay: calc(-1 * (var(--char-index) + 1) * (#{$duration} - (#{$duration} / #{$countchar}) * 0.1));

		animation: breatheweight $duration infinite both;
		animation-delay: var(--delay);
		animation-timing-function: $easing;
	}
}

%has-gradient {
	background-image: linear-gradient($angle, $brand--night 0%, transparent $phi-major * 100%);
}

.has-pattern {
	position: relative;
	overflow: hidden;
}
.pattern {
	white-space: nowrap;
	pointer-events: none;
	animation: fadeIn $duration * 4 $easing;
	display: block;
	position: absolute;
	z-index: z(up);
	top: 0;
	right: 0;
	left: 0;
	//bottom: 0;
	//width: 200%;
	text-align: justify;
	overflow-wrap: break-word;
	font-family: $font-family-pattern;
	font-size: var(--fontsize);
	--fontsize: 100vw;
	@include mq(large) {
		--fontsize: #{min(100vw * 0.5, $site-width * 0.5)};
	}
	text-align: center;
	line-height: 1;
	// .set & {
	// 	$s: 100vw;
	// 	font-size: $s;
	// 	line-height: clamp(0px, $phi-major * 100vh, 100vw);
	// }
	mix-blend-mode: screen;
	//color: $brand--color;
	color: $pattern--color;
	//color: fade-out($white, 0.8);

	@include mqcustom(1000px) {
		//maxiumum firefox font size
		//		transform: scale(1.91);
	}
}

.uppercase,
.brand {
	@include uppercase;
}
.touch {
	@include touch {
		&-not {
			display: none !important;
		}
	}
	@include notouch {
		&-only {
			display: none !important;
		}
	}
}

.ally,
.a11y,
.is-hidden,
.visually-hidden,
.hidden {
	@include a11y;
}
p abbr[title],
p .acronym {
	font-size: 0.98em;
	text-decoration: underline;
	text-decoration-style: dotted;
	text-decoration-color: $light;
}

%paintwhite {
	-ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(invert=1)";
	filter: saturate(0) contrast(0) brightness(0) invert(100%);
}

%paintblack {
	filter: saturate(0) contrast(0) brightness(0);
}

%svgshadow {
	filter: drop-shadow(0px 0px 8px rgba(0, 0, 0, $alpha));
}

.a11y,
.is-hidden,
.tml-user_company-wrap {
	@include hidden;
}
abbr[title],
.acronym {
	font-size: 0.95em;
}
.uppercase {
	@include uppercase;
}
.number {
	font-family: $font-family-brand;
	font-size: $fs6;
	line-height: 1;
	@include ultra--inverse;
	time {
		@include ultra--inverse;
	}
}
.unit {
	font-size: $fs-4;
	display: block;
	@include uppercase;
	font-family: $font-family-body;
	@include normal--inverse;
}

%grid {
	background-image: url("../image/grid.png"), url("../image/grid.png"), url("../image/grid.png"),
		url("../image/grid.png");
	$g: 6px;
	background-position: -#{$g} -#{$g}, calc(100% + #{$g}) -#{$g}, -#{$g} calc(100% + #{$g}),
		calc(100% + #{$g}) calc(100% + #{$g});
}

.spacer {
	@extend %grid;
	background-color: fade-out($white, 0.5);
	//mix-blend-mode: luminosity;
	--delayr: 0ms;
	$durationr: 20000ms;
	animation: breathebackground $durationr infinite both;
	animation-delay: var(--delayr);
	animation-timing-function: $easing;
	$spacer: 24;
	@for $j from 1 through $spacer {
		&:nth-of-type(#{$j}) {
			--delayr: calc(-1 * #{$j} * #{$durationr} / #{$spacer}* 0.8);
		}
	}
	&:nth-last-of-type(1),
	&:nth-last-of-type(2) {
		display: none;
		@include mq(medium) {
			display: block;
		}
	}
}
